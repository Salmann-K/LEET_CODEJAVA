 /*
    1290. Convert Binary Number in a Linked List to Integer

    public static int getDecimalValue(ListNode head) {
    ArrayList<Integer> al = new ArrayList<>();
    ListNode temp=head;
    while(temp!=null){
        al.add(temp.val);
        temp=temp.next;
    }
    int sum=0;
    int len=al.size();
    for (int i = 0; i <len; i++) {
        sum+=(Math.pow(2,i)*al.get(len-i-1));
    }
    return sum;
    }
     */

 /*
    83. Remove Duplicates from Sorted List

       public ListNode deleteDuplicates(ListNode node) {
        if(node==null){
            return node;
        }
        ListNode head=node;
        while(node.next!=null){
            if(node.val==node.next.val){
                node.next=node.next.next;

            }else {
                node=node.next;
            }
        }
        return head;
        }
     */
     
      /*
     21. Merge Two Sorted Lists
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode Ans=new ListNode();
        ListNode temp=Ans;
        while(list1!=null && list2!=null ){
            if(list1.val < list2.val){
                temp.next=list1;
                list1=list1.next;
                temp=temp.next;
            }else {
                temp.next=list2;
                list2=list2.next;
                temp=temp.next;
            }
        }
        tail.next=(list1!=null)?list1 :list2;
        return Ans.next;
    }
      */
      
      /*
        141. Linked List Cycle
        // Amazon And Microsoft
        public boolean hasCycle(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                return true;
            }
        }
        return false;
        }
    */
    
    /*
    //The Length Of Cycle
    public int hasCyclelength(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                ListNode temp=slow;
                int length=0;
                do{
                    temp=temp.next;
                    length++;
                }while(temp!=fast);
                return length;
            }
        }
        return 0;
    }
*/

/*
    142. Linked List Cycle II

    public int hasCyclelength(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                ListNode temp=slow;
                int length=0;
                do{
                    temp=temp.next;
                    length++;
                }while(temp!=fast);
                return length;
            }
        }
        return 0;
    }
    public ListNode detectCycle(ListNode head) {
        int length=0;
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                length=hasCyclelength(slow);
                break;
            }
        }
         if(length==0){
            return null;
        }
        // Need To Find Start Node
        ListNode f=head;
        ListNode s=head;
        while(length>0){
            s=s.next;
            length--;
        }
        // Keep Moving Both Forward Until Both Pointer Meet
        while(f!=s){
            f=f.next;
            s=s.next;
        }
        return s;
    }
    */
    
        /*
    876. Middle of the Linked List
   public ListNode middleNode(ListNode head) {
    ListNode fast=head;
    ListNode slow=head;
    while(fast!=null && fast.next!=null){
        slow=slow.next;
        fast=fast.next.next;
    }
    return slow;
    }
    */

