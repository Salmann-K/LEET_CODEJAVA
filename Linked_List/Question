 /*
    1290. Convert Binary Number in a Linked List to Integer

    public static int getDecimalValue(ListNode head) {
    ArrayList<Integer> al = new ArrayList<>();
    ListNode temp=head;
    while(temp!=null){
        al.add(temp.val);
        temp=temp.next;
    }
    int sum=0;
    int len=al.size();
    for (int i = 0; i <len; i++) {
        sum+=(Math.pow(2,i)*al.get(len-i-1));
    }
    return sum;
    }
     */

 /*
    83. Remove Duplicates from Sorted List

       public ListNode deleteDuplicates(ListNode node) {
        if(node==null){
            return node;
        }
        ListNode head=node;
        while(node.next!=null){
            if(node.val==node.next.val){
                node.next=node.next.next;

            }else {
                node=node.next;
            }
        }
        return head;
        }
     */
     
      /*
     21. Merge Two Sorted Lists
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode Ans=new ListNode();
        ListNode temp=Ans;
        while(list1!=null && list2!=null ){
            if(list1.val < list2.val){
                temp.next=list1;
                list1=list1.next;
                temp=temp.next;
            }else {
                temp.next=list2;
                list2=list2.next;
                temp=temp.next;
            }
        }
        tail.next=(list1!=null)?list1 :list2;
        return Ans.next;
    }
      */
      
      /*
        141. Linked List Cycle
        // Amazon And Microsoft
        public boolean hasCycle(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                return true;
            }
        }
        return false;
        }
    */
    
    /*
    //The Length Of Cycle
    public int hasCyclelength(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                ListNode temp=slow;
                int length=0;
                do{
                    temp=temp.next;
                    length++;
                }while(temp!=fast);
                return length;
            }
        }
        return 0;
    }
*/

/*
    142. Linked List Cycle II

    public int hasCyclelength(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                ListNode temp=slow;
                int length=0;
                do{
                    temp=temp.next;
                    length++;
                }while(temp!=fast);
                return length;
            }
        }
        return 0;
    }
    public ListNode detectCycle(ListNode head) {
        int length=0;
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                length=hasCyclelength(slow);
                break;
            }
        }
         if(length==0){
            return null;
        }
        // Need To Find Start Node
        ListNode f=head;
        ListNode s=head;
        while(length>0){
            s=s.next;
            length--;
        }
        // Keep Moving Both Forward Until Both Pointer Meet
        while(f!=s){
            f=f.next;
            s=s.next;
        }
        return s;
    }
    */
    
        /*
    876. Middle of the Linked List
   public ListNode middleNode(ListNode head) {
    ListNode fast=head;
    ListNode slow=head;
    while(fast!=null && fast.next!=null){
        slow=slow.next;
        fast=fast.next.next;
    }
    return slow;
    }
    */
    
         /*
    148. Sort List
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode mid = getMid(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);
        return merge(left, right);
    }
    ListNode merge(ListNode list1, ListNode list2) {
        ListNode dummyHead = new ListNode();
        ListNode tail = dummyHead;
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                tail.next = list1;
                list1 = list1.next;
                tail = tail.next;
            } else {
                tail.next = list2;
                list2 = list2.next;
                tail = tail.next;
            }
        }
        tail.next = (list1 != null) ? list1 : list2;
        return dummyHead.next;
    }
    ListNode getMid(ListNode head) {
        ListNode midPrev = null;
        while (head != null && head.next != null) {
            midPrev = (midPrev == null) ? head : midPrev.next;
            head = head.next.next;
        }
        ListNode mid = midPrev.next;
        midPrev.next = null;
        return mid;
    }
    */

 /*
    237. Delete Node in a Linked List
    public void deleteNode(ListNode node) {
        node.val=node.next.val;
        node.next=node.next.next;
    }
     */
     
      /*
    206. Reverse Linked List
    public ListNode reverseList(ListNode head) {
        if(head==null){
            return head;
        }
        ListNode prev=null;
        ListNode present=head;
        ListNode next = present.next;
        while(present!=null){
            present.next=prev;
            prev=present;
            present=next;
            if(next!=null){
                next=next.next;
            }
        }
        return prev;
    }
     */
     
     
    /*
        92. Reverse Linked List II
        // Google, Microsoft, Facebook:
        public ListNode reverseBetween(ListNode head, int left, int right) {
        if (left == right) {
            return head;
        }
        // skip the first left-1 nodes
        ListNode current = head;
        ListNode prev = null;
        for (int i = 0; current != null && i < left - 1; i++) {
            prev = current;
            current = current.next;
        }
        ListNode last = prev;
        ListNode newEnd = current;
        // reverse between left and right
        ListNode next = current.next;
        for (int i = 0; current != null && i < right - left + 1; i++) {
            current.next = prev;
            prev = current;
            current = next;
            if (next != null) {
                next = next.next;
            }
        }
        if (last != null) {
            last.next = prev;
        } else {
            head = prev;
        }
        newEnd.next = current;
        return head;
        }
        */

        /*
        234. Palindrome Linked List
        // linkedin, google, facebook, microsoft, amazon, apple

        public boolean isPalindrome(ListNode head) {
        ListNode mid = middleNode(head);
        ListNode headSecond = reverseList(mid);
        ListNode reversehead = headSecond;

        //Compare Both Halfs
        while(head!=null && headSecond!=null) {
            if (head.val != headSecond.val) {
                break;
            }
            head = head.next;
            headSecond = headSecond.next;
        }
        reverseList(reversehead);
        return head == null || headSecond == null;
        }
        public ListNode reverseList(ListNode head) {
        if(head==null){
            return head;
        }
        ListNode prev=null;
        ListNode present=head;
        ListNode next = present.next;
        while(present!=null){
            present.next=prev;
            prev=present;
            present=next;
            if(next!=null){
                next=next.next;
            }
        }
        return prev;
        }
        public ListNode middleNode(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
        }
         */


        /*
        160. Intersection of Two Linked Lists
        public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode head1 = headA;
        ListNode head2 = headB;

        while(head1 != head2){

            if(head1 == null){
                head1 = headB;
            }else{
                head1 = head1.next;
            }
            if(head2 == null){
                head2 = headA;
            }else{
                head2 = head2.next;
            }
        }
        return head1;
        }
         */

        /*
        143. Reorder List
        // Google, Facebook
        public void reorderList(ListNode head) {
        if(head==null || head.next==null){
        return;
        }
        ListNode mid = middleNode(head);
        ListNode hs=reverseList(mid);
        ListNode hf=head;
        // rearranging
        while(hf!=null && hs !=null){
        ListNode temp=hf.next;
        hf.next=hs; hf=temp; temp=hs.next;
        hs.next=hf;
        hs=temp;
        }
        //setting  next of tail to null
        if(hf!=null){
        hf.next=null;
        }
        }
        public ListNode middleNode(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
        }
                 public ListNode reverseList(ListNode head) {
        if(head==null){
            return head;
        }
        ListNode prev=null;
        ListNode present=head;
        ListNode next = present.next;
        while(present!=null){
            present.next=prev;
            prev=present;
            present=next;
            if(next!=null){
                next=next.next;
            }
        }
        return prev;
        }
        */

    /*
    25. Reverse Nodes in k-Group
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null)
            return null;
        int j = 0;
        ListNode temp = head;
        while(temp != null){
            temp = temp.next;
            j++;
        }
        ListNode prev = null, curr = head, next = null;
        int i = 0;
        while(curr != null && i < k){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            i++;
        }
        if(next != null && j - i >= k){
            head.next = reverseKGroup(next, k);
        }else{
            head.next = next;
        }
        return prev;
    }
    */

   /*
    //61. Rotate List
    public ListNode rotateRight(ListNode head,int k){
        if (k <= 0 || head == null || head.next == null) {
            return head;
        }
        ListNode last = head;
        int length = 1;
        while (last.next != null) {
            last = last.next;
            length++;
        }
        last.next = head;
        int rotations = k % length;
        int skip = length - rotations;
        ListNode newLast = head;
        for (int i = 0; i < skip - 1; i++) {
            newLast = newLast.next;
        }
        head = newLast.next;
        newLast.next = null;
        return head;
    }
     */
    /*
    2095. Delete the Middle Node of a Linked List
    public ListNode deleteMiddle(ListNode head) {
    if(head==null || head.next==null){
        return null;
    }
    ListNode mid = middleNode(head);
    ListNode temp=head;
    while (temp.next!=mid){
        temp=temp.next;
    }
    temp.next=mid.next;
    return head;
    }
    public ListNode middleNode(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    */


