package com.company.dsajava.LINKEDLIST;

// Singly Linkedlist
public class Singly_CUSTOM_LINKEDLIST {
    private Node head;
    private Node tail;
    private int size;
    public void insertfirst(int val){
        Node node = new Node(val);
        node.next=head;
        head=node;
        if(tail==null){
            tail=head;
        }
        size+=1;
    }
    // Inserting At Last position
    public void insertlast(int val){
        if(tail==null){
            insertfirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next=node;
        tail=node;
        size++;
    }
    public void insert(int val, int index){
        if(index==0){
            insertfirst(val);
            return;
        }
        if(index==size){
            insertlast(val);
            return;
        }
        Node temp =head;
        for (int i = 1; i <index ; i++) {
            temp=temp.next;
        }


        Node node = new Node(val,temp.next);
        temp.next=node;
        size++;
    }

    public void insertrecu(int val, int index){
        head=insertrec(val,index,head);
    }
    private Node insertrec(int val , int index,Node node){
        if(index==0){
            Node temp=new Node(val,node);
            size++;
            return temp;
        }
        node.next=insertrec(val,index-1,node.next);
        return node;
    }
    public int deletefirst(){
        int val= head.value;
        head=head.next;
        if(head==null){
            tail=null;
        }
        size--;
        return val;
    }
    public int deletelast(){
        if(size<=1){
            return deletefirst();
        }
        Node secondlast = get(size-2);
        int val= tail.value;
        tail=secondlast;
        tail.next=null;
        return val;
    }
    public int delete(int index){
        if(index==0){
            return deletefirst();
        }
        if(index==size){
            return deletelast();
        }
        Node prev = get(index-1);
        int val=prev.next.value;

        prev.next=prev.next.next;

        return val;
    }

    public Node find(int value){
        Node node = head;
        while(node!=null){
            if(node.value==value){
                return node;
            }
            node=node.next;
        }
        return null;
    }
    // It Returns The reference Pointer To The Provide Index Node
    public Node get(int index){
        Node node = head;
        for (int i = 0; i <index ; i++) {
            node= node.next;
        }
        return node;
    }
    public void display(){
        Node temp=head;
        while (temp!=null){
            System.out.print(temp.value+" -> ");
            temp=temp.next;
        }
        System.out.println("End");
    }
    private class Node{
        private int value;
        private Node next;
        public Node(int Value) {
            this.value=Value;
        }
        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }

    }

    // Bubble Sort
    /*
    public void bubbleSort() {
        bubbleSort(size - 1, 0);
    }
    private void bubbleSort(int row, int col) {
        if (row == 0) {
            return;
        }
        if (col < row) {
            Node first = get(col);
            Node second = get(col + 1);

            if (first.value > second.value) {
                // swap
                if (first == head) {
                    head = second;
                    first.next = second.next;
                    second.next = first;
                } else if (second == tail) {
                    Node prev = get(col - 1);
                    prev.next = second;
                    tail = first;
                    first.next = null;
                    second.next = tail;
                } else {
                    Node prev = get(col - 1);
                    prev.next = second;
                    first.next = second.next;
                    second.next = first;
                }
            }
            bubbleSort(row, col + 1);
        } else {
            bubbleSort(row - 1, 0);
        }
    }*/


    /*
    // REVERSING A LINKEDLIST

    //Recursion
    private void reverse(Node node){
        if(node==tail){
            head=tail;
            return;
        }
        reverse(node.next);
        tail.next=node;
        tail=node;
        tail.next=null;
    }

    // Inplace Reversal
    // GOOGLE MICROSOFT AMAZON APPLE

    public void inplacereverse(){
        if(size<2){
            return;
        }
        Node prev=null;
        Node present=head;
        Node next = present.next;

        while(present!=null){
            present.next=prev;
            prev=present;
            present=next;
            if(next!=null){
                next=next.next;
            }
        }
        head=prev;
    }
    */



}
