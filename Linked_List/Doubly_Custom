package com.company.dsajava.LINKEDLIST;

public class Doubly_CUSTOM_LINKEDLIST {
     private Node head;
     public void insertfirst(int val){
         Node node = new Node(val);
         node.next=head;
         node.prev=null;
         if(head!=null){
             head.prev=node;
         }
         head=node;
     }
     public void insertlast(int val){
         Node node = new Node(val);
         Node tem=head;
         node.next=null;
         if(head==null){
             node.prev=null;
             head=node;
             return;
         }
         while(tem.next!=null){
             tem=tem.next;
         }
         tem.next=node;
         node.prev=tem;
     }
     public void insert(int val,int index){
         if(index==0){
             insertfirst(val);
             return;
         }
         Node temp=head;
         for (int i = 1; i <index ; i++) {
             temp=temp.next;
         }
         Node node = new Node(val);
         node.next=temp.next;
         temp.next=node;
         node.prev=temp;
     }
     
      public void insertafter(int after, int val){
         Node p=find(after);
         if(p==null){
             System.out.println("Does Not Exist");
             return;
         }
         Node node = new Node(val);
         node.next=p.next;
         p.next=node;
         node.prev=p;
         if(node.next!=null){
             node.next.prev=node;
         }
     }
    public Node find(int value){
        Node node = head;
        while(node!=null){
            if(node.val== value){
                return node;
            }
            node=node.next;
        }
        return null;
    }
     public int deletefirst(){
         int value=head.val;
         head=head.next;
         if(head==null){
             return -1;
         }
         return value;
     }
     
     public int deletelast(){
         if(head.next==null){
             return deletefirst();
         }
         Node temp=head;
         while(temp.next.next!=null) {
             temp = temp.next;
         }
         int val= temp.next.val;
         temp.next=null;
         return val;
     }
     public int delete(int index){
         if(index==0){
             return deletefirst();
         }
         Node temp=head;
         for (int i = 1; i <index ; i++) {
             temp=temp.next;
         }
         int val=temp.next.val;
         temp.next=temp.next.next;
         temp.next.next.prev=temp;
         return val;
     }
     public void display(){
         Node node = head;
         Node last = null;
         while(node!=null){
             System.out.print(node.val+" -> ");
             last=node;
             node=node.next;
         }
         System.out.println("END");
         while(last!=null){
             System.out.print(last.val+" -> ");
             last=last.prev;
         }
         System.out.println("Start");
     }
    private class Node{
        private int val;
        private Node next;
        private Node prev;

        public Node(int val){
            this.val=val;
        }

        public Node(int val, Node next, Node prev) {
            this.val = val;
            this.next = next;
            this.prev = prev;
        }
        
    }
}

