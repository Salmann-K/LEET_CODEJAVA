package com.company.dsajava.OOPS;

public class INHERITANCE {
    public static void main(String[] args) {
//        Box box1= new Box(4,5,6);
//        Box box2 = new Box(box1);
//        Boxweight box3 = new Boxweight(7,8,9,4);
//        System.out.println(box1.l+", "+box1.w+", "+box1.h);
//        System.out.println(box2.l+", "+box2.w+", "+box2.h);
//        System.out.println(box3.l+", "+box3.w+", "+box3.h+", "+box3.weight);
//
//        Box box5= new Boxweight(10,11,12,13);
//        System.out.println(box5.weight);
        // Give Error Even Though The Object Is Of Type Box weight
        // Because It Is The Type of reference Variable not the type of object Which Determines
        // What members Can Be Accessed

//        Boxweight box6= new Box(8,7,9);
        // Giving error
        // We Have Access To variable That Are in ref Type
        // Hence We Have Access To Weight Variable
        // This Also Means That the Once You Are Trying to Access Should Be Initialised

        // But Here, Since Object Itself Of Type Parent class , How will You call The Constructor
        // Of Child Class

        // Upward Classes Does not Know What Is Below but The Below Classes Know What Is Above

        Boxprice box = new Boxprice(5,8,200);
        System.out.println(box.l+" "+box.weight+" "+box.cost);

    }
}

class Box{
    double l;
    double w;
    double h;
    double weight;
    Box(){
     this.l=-1;
     this.w=-1;
     this.h=-1;
    }

  // For Cube
    Box(double side){
        super();
        // We Can Also Call super In Parent Class Because Every Class Is Derived From Object
        // Class . Hence It Will Not Give Any Error.
        this.l=side;
        this.w=side;
        this.h=side;
    }
    public Box(double l, double w, double h) {
        this.l = l;
        this.w = w;
        this.h = h;
    }
    Box(Box old){
        this.l=old.l;
        this.w=old.w;
        this.h=old.h;
    }
}

class Boxweight extends Box{
    double weight;
    Boxweight(){
        this.weight=-1;
    }
    public Boxweight(double l, double w, double h, double weight) {
        super(l, w, h);
        // Used Calling The Directly Above Parent Class Constructor
        // Used To Initialise Values Present In Parent Class
        // This Cannot Access Things Which Are Declared As Private In Parent Class
        System.out.println(super.weight);
        // Super can Also Be Used To Explicitly Call The Members Of Parent class
        // Ex- If Parent And Child Class have A Variable/method  Of Same Name Then We Can use
        // Super.variable_name to Specifically Call The Parent Class Variable/method

        this.weight = weight;
//        super(l, w, h);
        // We Can't Initialise The Parent Class Later If The Function Needs It.
        // We Need To First initialise The Parent Class Otherwise It Will give Error.
        // Parent Class Doesn't Care What's Below it But Child Class Care What is Above It So
        // We need To Declare Parent Class First Or Call Them First If Needed
    }


    public Boxweight(Boxweight other) {
        super(other);
        weight=this.weight;
    }

    public Boxweight(double side, double weight) {
        super(side);
        this.weight=weight;
    }
}

class Boxprice extends Boxweight{
    double cost;

    Boxprice(){
        this.cost =-1;
    }

    Boxprice(Boxprice other) {
        super(other);
        this.cost = other.cost;
    }

    public Boxprice(double l, double w, double h, double weight, double cost) {
        super(l, w, h, weight);
        this.cost = cost;
    }

    public Boxprice(double side, double weight, double cost) {
        super(side, weight);
        this.cost = cost;
    }
}
