package com.company.dsajava.OOPS;

public class PackagesStaticSingelton {
    public static void main(String[] args) {

        ////////////// Static //////////////////

        sol Salman = new sol(21,"Salman",10000,false);
        sol Himanshu = new sol(20,"Himanshu",11000,false);
        sol ujjawal = new sol(20,"ujjawal",11000,false);
        System.out.println(Salman.name);
        //Both Of Them Giving 1 When Population Is Not Static.
        System.out.println(Salman.population);
        System.out.println(Himanshu.population);
        // Both Of Them Giving 3 When Population Is Not Static.
        System.out.println(Salman.population);
        System.out.println(Himanshu.population);
        System.out.println(ujjawal.population);
        // We Can Access static Variable Without Creating The Object first and Without referencing to
        // Objects
        System.out.println(sol.population);
        // We Cannot Call Not Static Method/Function Inside A Static Method/Function
        // It Give Error
           //greeting();
        // It Will Not Give Error
        greeting2();
    }
    // Something That Is Not Static Belong To An Object
    void greeting(){
        System.out.println("Good Morning Salman");
        // We Can Use This Because it does not require An Instance
        //greeting2();
    }
    // This Is Not Dependent On Objects
    static void greeting2(){
        System.out.println("Good Morning Salman Khan");
        // greeting();
        // We Cannot Use This Because it requires An Instance
        // But The Function In Which We Are using It Does not Depend On Instance
        // The Object is required To Use This
        PackagesStaticSingelton obj=new PackagesStaticSingelton();
        obj.greeting();
        // Now We Can Use This Because Its Object Is Being Made
        // This Is Why Below Non Static Inside a Non Static Was Not Giving error
        PackagesStaticSingelton Funnn = new PackagesStaticSingelton();
        Funnn.fun();
    }
    void fun(){
        greeting();
        // Here It Will Not Give Any Error . Because fun Is eventually be Gonna called In Static
        // Main And Its Object Will Gonna Be Created
    }
}
